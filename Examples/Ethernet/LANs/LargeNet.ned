//
// Copyright (C) 2003 CTIE, Monash University
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

import "EtherBus";
import "EtherHub";
import "EtherHost";
import "EtherSwitch";
import "ChannelInstaller";

channel cable extends cBasicChannel
{
    parameters:
        delay = 0.1us;
}


//
// Several hosts on an Ethernet hub
//
module SmallLAN
{
    parameters:
        double h; // number of hosts on the hub
        @display("i=cloud_s");
    gates:
        input in;
        output out;
    submodules:
        hub: EtherHub {
            parameters:
                @display("");
        };
        host[h]: EtherHost {
            parameters:
                @display("");
        };
    connections:
        for i=0..h-1 {
            hub.out++ --> cable --> host[i].in;
            hub.in++ <-- cable <-- host[i].out;
        };
        hub.out++ --> out;
        hub.in++ <-- in;
}


//
// Several hosts and an Ethernet hub on a switch
//
module MediumLAN
{
    parameters:
        double n; // number of hosts on the switch
        double h; // number of hosts on the hub
        @display("i=cloud_s");
    gates:
        input in;
        output out;
    submodules:
        switch: EtherSwitch {
            parameters:
                @display("");
        };
        host[n]: EtherHost {
            parameters:
                @display("");
        };
        hub: EtherHub {
            parameters:
                @display("");
        };
        hhost[h]: EtherHost {
            parameters:
                @display("");
        };
    connections:
        for i=0..n-1 {
            switch.out++ --> cable --> host[i].in;
            switch.in++ <-- cable <-- host[i].out;
        };

        switch.out++ --> out;
        switch.in++ <-- in;

        for i=0..h-1 {
            hub.out++ --> cable --> hhost[i].in;
            hub.in++ <-- cable <-- hhost[i].out;
        };

        switch.out++ --> cable --> hub.in++;
        switch.in++ <-- cable <-- hub.out++;

}


//
// Several hosts and an Ethernet hub on a switch. One port of the hub
// connect to a 10Base2 segment.
//
module LargeLAN
{
    parameters:
        double n; // number of hosts on the switch
        double h; // number of hosts on the hub
        double b; // number of hosts on the bus
        @display("i=cloud");
    gates:
        input in;
        output out;
    submodules:
        switch: EtherSwitch {
            parameters:
                @display("");
        };
        host[n]: EtherHost {
            parameters:
                @display("");
        };
        hub: EtherHub {
            parameters:
                @display("");
        };
        hhost[h]: EtherHost {
            parameters:
                @display("");
        };
        bus: EtherBus {
            parameters:
                positions = "5 10 15"; // every 5 meters
                propagationSpeed = 200000000;  // 1us = 200m
                @display("b=424,6;o=#408060");
        };
        bhost[b]: EtherHost {
            parameters:
                @display("p=,,r");

        };
    connections:
        for i=0..n-1 {
            switch.out++ --> cable --> host[i].in;
            switch.in++ <-- cable <-- host[i].out;
        };

        switch.out++ --> out;
        switch.in++ <-- in;

        for i=0..h-1 {
            hub.out++ --> cable --> hhost[i].in;
            hub.in++ <-- cable <-- hhost[i].out;
        };

        switch.out++ --> cable --> hub.in++;
        switch.in++ <-- cable <-- hub.out++;

        for i=0..b-1 {
            bus.out++ --> bhost[i].in;
            bus.in++ <-- bhost[i].out;
        };

        bus.out++ --> hub.in++;
        bus.in++ <-- hub.out++;

}

//
// A large Ethernet LAN -- see model description
// <a href="largenet.html">here</a>.
//
network LargeNet
{
    parameters:
        double n;          // length of the "backbone" (n>5!)
        volatile double bbs;
        volatile double bbm;
        double bbl; // number of small/medium/large LANs on "backbone" switches
        volatile double as;
        volatile double am;
        double al; // number of small/medium/large LANs on switch A
        volatile double bs;
        volatile double bm;
        double bl; // number of small/medium/large LANs on switch B
        volatile double cs;
        volatile double cm;
        double cl; // number of small/medium/large LANs on switch C
        volatile double ds;
        volatile double dm;
        double dl; // number of small/medium/large LANs on switch D
    submodules:
        switchBB[n]: EtherSwitch {
            parameters:
                @display("");
        };
        slanBB[n*bbs]: SmallLAN {
            parameters:
                @display("");
        };
        mlanBB[n*bbm]: MediumLAN {
            parameters:
                @display("");
        };
        llanBB[n*bbl]: LargeLAN {
            parameters:
                @display("");

        };
        switchA: EtherSwitch {
            parameters:
                @display("");
        };
        serverA: EtherHost {
            parameters:
                @display("");
        };
        slanA[as]: SmallLAN {
            parameters:
                @display("");
        };
        mlanA[am]: MediumLAN {
            parameters:
                @display("");
        };
        llanA[al]: LargeLAN {
            parameters:
                @display("");

        };
        switchB: EtherSwitch {
            parameters:
                @display("");
        };
        serverB: EtherHost {
            parameters:
                @display("");
        };
        slanB[bs]: SmallLAN {
            parameters:
                @display("");
        };
        mlanB[bm]: MediumLAN {
            parameters:
                @display("");
        };
        llanB[bl]: LargeLAN {
            parameters:
                @display("");

        };
        switchC: EtherSwitch {
            parameters:
                @display("");
        };
        serverC: EtherHost {
            parameters:
                @display("");
        };
        slanC[cs]: SmallLAN {
            parameters:
                @display("");
        };
        mlanC[cm]: MediumLAN {
            parameters:
                @display("");
        };
        llanC[cl]: LargeLAN {
            parameters:
                @display("");

        };
        switchD: EtherSwitch {
            parameters:
                @display("");
        };
        serverD: EtherHost {
            parameters:
                @display("");
        };
        slanD[ds]: SmallLAN {
            parameters:
                @display("");
        };
        mlanD[dm]: MediumLAN {
            parameters:
                @display("");
        };
        llanD[dl]: LargeLAN {
            parameters:
                @display("");

        };
    connections allowunconnected:
        // "backbone" switches
        for k=0..n-1, for i=0..bbs-1 {
            switchBB[k].out++ --> cable --> slanBB[k*bbs+i].in;
            switchBB[k].in++ <-- cable <-- slanBB[k*bbs+i].out;
        };
        for k=0..n-1, for i=0..bbm-1 {
            switchBB[k].out++ --> cable --> mlanBB[k*bbm+i].in;
            switchBB[k].in++ <-- cable <-- mlanBB[k*bbm+i].out;
        };
        for k=0..n-1, for i=0..bbl-1 {
            switchBB[k].out++ --> cable --> llanBB[k*bbl+i].in;
            switchBB[k].in++ <-- cable <-- llanBB[k*bbl+i].out;
        };
        for k=0..n-2 {
            switchBB[k].out++ --> cable --> switchBB[k+1].in++;
            switchBB[k].in++ <-- cable <-- switchBB[k+1].out++;
        };

        // switch A
        for i=0..as-1 {
            switchA.out++ --> cable --> slanA[i].in;
            switchA.in++ <-- cable <-- slanA[i].out;
        };
        for i=0..am-1 {
            switchA.out++ --> cable --> mlanA[i].in;
            switchA.in++ <-- cable <-- mlanA[i].out;
        };
        for i=0..al-1 {
            switchA.out++ --> cable --> llanA[i].in;
            switchA.in++ <-- cable <-- llanA[i].out;
        };
        switchA.out++ --> cable --> serverA.in;
        switchA.in++ <-- cable <-- serverA.out;

        // switch B
        for i=0..bs-1 {
            switchB.out++ --> cable --> slanB[i].in;
            switchB.in++ <-- cable <-- slanB[i].out;
        };
        for i=0..bm-1 {
            switchB.out++ --> cable --> mlanB[i].in;
            switchB.in++ <-- cable <-- mlanB[i].out;
        };
        for i=0..bl-1 {
            switchB.out++ --> cable --> llanB[i].in;
            switchB.in++ <-- cable <-- llanB[i].out;
        };
        switchB.out++ --> cable --> serverB.in;
        switchB.in++ <-- cable <-- serverB.out;

        // switch C
        for i=0..cs-1 {
            switchC.out++ --> cable --> slanC[i].in;
            switchC.in++ <-- cable <-- slanC[i].out;
        };
        for i=0..cm-1 {
            switchC.out++ --> cable --> mlanC[i].in;
            switchC.in++ <-- cable <-- mlanC[i].out;
        };
        for i=0..cl-1 {
            switchC.out++ --> cable --> llanC[i].in;
            switchC.in++ <-- cable <-- llanC[i].out;
        };
        switchC.out++ --> cable --> serverC.in;
        switchC.in++ <-- cable <-- serverC.out;

        // switch D
        for i=0..ds-1 {
            switchD.out++ --> cable --> slanD[i].in;
            switchD.in++ <-- cable <-- slanD[i].out;
        };
        for i=0..dm-1 {
            switchD.out++ --> cable --> mlanD[i].in;
            switchD.in++ <-- cable <-- mlanD[i].out;
        };
        for i=0..dl-1 {
            switchD.out++ --> cable --> llanD[i].in;
            switchD.in++ <-- cable <-- llanD[i].out;
        };
        switchD.out++ --> cable --> serverD.in;
        switchD.in++ <-- cable <-- serverD.out;

        // connect switches
        switchA.out++ --> cable --> switchB.in++;
        switchA.in++ <-- cable <-- switchB.out++;

        switchB.out++ --> cable --> switchC.in++;
        switchB.in++ <-- cable <-- switchC.out++;

        switchC.out++ --> cable --> switchD.in++;
        switchC.in++ <-- cable <-- switchD.out++;

        switchB.out++ --> cable --> switchBB[4].in++;
        switchB.in++ <-- cable <-- switchBB[4].out++;

}


