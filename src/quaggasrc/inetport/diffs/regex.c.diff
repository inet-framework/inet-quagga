--- lib/regex.c.orig	2009-05-08 17:46:43.000000000 +0200
+++ lib/regex.c	2009-06-18 12:32:33.000000000 +0200
@@ -27,6 +27,8 @@
 #undef	_GNU_SOURCE
 #define _GNU_SOURCE
 
+#include "globalvars.h"
+
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
@@ -168,9 +170,6 @@
 #  define SWITCH_ENUM_CAST(x) (x)
 # endif
 
-/* How many characters in the character set.  */
-# define CHAR_SET_SIZE 256
-
 # ifdef SYNTAX_TABLE
 
 extern char *re_syntax_table;
@@ -1018,7 +1017,6 @@
    but why not be nice?  */
 
 static const char re_error_msgid[] =
-  {
 #define REG_NOERROR_IDX	0
     gettext_noop ("Success")	/* REG_NOERROR */
     "\0"
@@ -1068,8 +1066,7 @@
     gettext_noop ("Regular expression too big") /* REG_ESIZE */
     "\0"
 #define REG_ERPAREN_IDX	(REG_ESIZE_IDX + sizeof "Regular expression too big")
-    gettext_noop ("Unmatched ) or \\)"), /* REG_ERPAREN */
-  };
+    gettext_noop ("Unmatched ) or \\)"); /* REG_ERPAREN */
 
 static const size_t re_error_msgid_idx[] =
   {
@@ -1182,6 +1179,10 @@
 int re_max_failures = 2000;
 # endif
 
+// doxygen outputs wrong line number for this variable
+// moving it here helps, don't ask me why
+static char reg_unset_dummy;
+
 union fail_stack_elt
 {
   unsigned char *pointer;
@@ -1552,7 +1553,6 @@
   while (0)
 
 /* Registers are set to a sentinel when they haven't yet matched.  */
-static char reg_unset_dummy;
 #define REG_UNSET_VALUE (&reg_unset_dummy)
 #define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
 
